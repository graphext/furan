{{- $accesskey :=  "graphext" | nospace -}}
{{- $secretkey := randAlphaNum 24 | nospace -}}
---
# Source: minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: {{ .Release.Name }}
    heritage: Helm
  annotations:
    "helm.sh/hook": pre-install
type: Opaque
data:
  accesskey: {{ $accesskey | b64enc }}
  secretkey: {{ $secretkey | b64enc }}
---
kind: Secret
apiVersion: v1
metadata:
  name: cloud-storage-config
  labels:
    app: minio
    chart: minio-8.0.10
    release: {{ .Release.Name }}
    heritage: Helm
  annotations:
    "helm.sh/hook": pre-install
data:
  CLOUD_STORAGE_CONFIG: |-
{{ printf `[{
  "provider": "AWS",
  "uri_scheme": "cloud",
  "aws_access_key_id": %q,
  "aws_secret_access_key": %q,
  "endpoint": "https://minio.%s.testing.graphext.com",
  "host": "minio.%s.testing.graphext.com",
  "port": "443",
  "scheme": "https"
},
{
  "provider": "AWS",
  "uri_scheme": "gs",
  "aws_access_key_id": %q,
  "aws_secret_access_key": %q,
  "endpoint": "https://minio.%s.testing.graphext.com",
  "host": "minio.%s.testing.graphext.com",
  "port": "443",
  "scheme": "https"
}]` $accesskey $secretkey .Values.env_name .Values.env_name $accesskey $secretkey .Values.env_name .Values.env_name | b64enc | indent 4 }}
---
# Source: minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: {{ .Release.Name }}
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4

      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi


      # set versioning for bucket
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi

      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }

    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
    # Create the buckets
{{ range .Values.buckets }}
  {{- printf `createBucket %v %v %v` .name .access .purge | indent 4 }}
{{ end -}}
---
# Source: minio/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: {{ .Release.Name }}
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: {{ .Values.storage_request }}
---
# Source: minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: {{ .Release.Name }}
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: {{ .Release.Name }}
---
# Source: minio/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: {{ .Release.Name }}
    heritage: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: minio
      release: {{ .Release.Name }}
  template:
    metadata:
      name: {{ .Release.Name }}-minio
      labels:
        app: minio
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "minio.serviceAccountName" . }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: minio
          image: "minio/minio:RELEASE.2021-02-14T04-01-33Z"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-ce"
            - "/usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export"
          volumeMounts:
            - name: export
              mountPath: /export
          ports:
            - name: http
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-minio
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-minio
                  key: secretkey
          resources:
            requests:
              memory: 256Mi
      volumes:
        - name: export
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-minio
        - name: minio-user
          secret:
            secretName: {{ .Release.Name }}-minio
---
# Source: minio/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: {{ .Release.Name }}
    heritage: Helm
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 1000m
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
spec:
  tls:
    - hosts:
        - minio.{{ .Values.env_name }}.testing.graphext.com
      secretName: minio-certs-tls
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: minio
              servicePort: 80
      host: minio.{{ .Values.env_name }}.testing.graphext.com
---
# Source: minio/templates/post-install-create-bucket-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-minio-make-bucket-job
  labels:
    app: minio-make-bucket-job
    chart: minio-8.0.10
    release: {{ .Release.Name }}
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: {{ .Release.Name }}-minio
            - secret:
                name: {{ .Release.Name }}-minio
      serviceAccountName: {{ include "minio.serviceAccountName" . }}
      containers:
      - name: minio-mc
        image: "minio/mc:RELEASE.2021-02-14T04-28-06Z"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/config/initialize"]
        env:
          - name: MINIO_ENDPOINT
            value: minio
          - name: MINIO_PORT
            value: "80"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            memory: 128Mi
